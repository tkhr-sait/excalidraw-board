# Multi-stage build for optimized production image
FROM node:18-alpine AS builder

WORKDIR /app

# 依存関係のインストール
COPY frontend/package.json frontend/package-lock.json ./
RUN npm ci --only=production=false

# アプリケーションコードのコピー
COPY frontend/ .

# ビルド実行（環境変数は実行時に注入）
RUN npm run build

# Production stage
FROM nginx:alpine AS production

# セキュリティ強化: 不要なパッケージを削除
RUN apk del --no-cache apk-tools

# nginxユーザーで実行
RUN addgroup -g 1001 -S nginx-app && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx-app -g nginx-app nginx-app

# ビルド成果物をコピー
COPY --from=builder /app/dist /usr/share/nginx/html

# 環境変数注入スクリプトをコピー
COPY docker/env-inject.sh /usr/local/bin/env-inject.sh
RUN chmod +x /usr/local/bin/env-inject.sh

# nginx設定をコピー
COPY docker/nginx.frontend.conf /etc/nginx/nginx.conf

# ポート公開
EXPOSE 80

# 起動時に環境変数を注入してからnginxを起動
CMD ["/bin/sh", "-c", "/usr/local/bin/env-inject.sh && nginx -g 'daemon off;'"]